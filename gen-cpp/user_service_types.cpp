/**
 * Autogenerated by Thrift Compiler (0.23.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "user_service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kGenderValues[] = {
  Gender::UNKNOWN,
  Gender::MALE,
  Gender::FEMALE,
  Gender::OTHER
};
const char* _kGenderNames[] = {
  "UNKNOWN",
  "MALE",
  "FEMALE",
  "OTHER"
};
const std::map<int, const char*> _Gender_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kGenderValues, _kGenderNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const Gender::type& val) {
  std::map<int, const char*>::const_iterator it = _Gender_VALUES_TO_NAMES.find(val);
  if (it != _Gender_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const Gender::type& val) {
  std::map<int, const char*>::const_iterator it = _Gender_VALUES_TO_NAMES.find(val);
  if (it != _Gender_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


User::~User() noexcept {
}

User::User() noexcept
   : id(0),
     username(),
     gender(static_cast<Gender::type>(0)),
     age(0),
     phone(),
     email(),
     description() {
}

void User::__set_id(const int64_t val) {
  this->id = val;
}

void User::__set_username(const std::string& val) {
  this->username = val;
}

void User::__set_gender(const Gender::type val) {
  this->gender = val;
}

void User::__set_age(const int32_t val) {
  this->age = val;
}

void User::__set_phone(const std::string& val) {
  this->phone = val;
}

void User::__set_email(const std::string& val) {
  this->email = val;
}

void User::__set_description(const std::string& val) {
  this->description = val;
}

void User::__set_field_mask(const std::map<std::string, bool> & val) {
  this->field_mask = val;
__isset.field_mask = true;
}
std::ostream& operator<<(std::ostream& out, const User& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->gender = static_cast<Gender::type>(ecast0);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->age);
          this->__isset.age = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->field_mask.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _ktype2;
            ::apache::thrift::protocol::TType _vtype3;
            xfer += iprot->readMapBegin(_ktype2, _vtype3, _size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              std::string _key6;
              xfer += iprot->readString(_key6);
              bool& _val7 = this->field_mask[_key6];
              xfer += iprot->readBool(_val7);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.field_mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->gender));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("age", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->age);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.field_mask) {
    xfer += oprot->writeFieldBegin("field_mask", ::apache::thrift::protocol::T_MAP, 8);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->field_mask.size()));
      std::map<std::string, bool> ::const_iterator _iter8;
      for (_iter8 = this->field_mask.begin(); _iter8 != this->field_mask.end(); ++_iter8)
      {
        xfer += oprot->writeString(_iter8->first);
        xfer += oprot->writeBool(_iter8->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) noexcept {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.username, b.username);
  swap(a.gender, b.gender);
  swap(a.age, b.age);
  swap(a.phone, b.phone);
  swap(a.email, b.email);
  swap(a.description, b.description);
  swap(a.field_mask, b.field_mask);
  swap(a.__isset, b.__isset);
}

bool User::operator==(const User & rhs) const
{
  if (!(id == rhs.id))
    return false;
  if (!(username == rhs.username))
    return false;
  if (!(gender == rhs.gender))
    return false;
  if (!(age == rhs.age))
    return false;
  if (!(phone == rhs.phone))
    return false;
  if (!(email == rhs.email))
    return false;
  if (!(description == rhs.description))
    return false;
  if (__isset.field_mask != rhs.__isset.field_mask)
    return false;
  else if (__isset.field_mask && !(field_mask == rhs.field_mask))
    return false;
  return true;
}

User::User(const User& other9) {
  id = other9.id;
  username = other9.username;
  gender = other9.gender;
  age = other9.age;
  phone = other9.phone;
  email = other9.email;
  description = other9.description;
  field_mask = other9.field_mask;
  __isset = other9.__isset;
}
User& User::operator=(const User& other10) {
  id = other10.id;
  username = other10.username;
  gender = other10.gender;
  age = other10.age;
  phone = other10.phone;
  email = other10.email;
  description = other10.description;
  field_mask = other10.field_mask;
  __isset = other10.__isset;
  return *this;
}
void User::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User(";
  out << "id=" << to_string(id);
  out << ", " << "username=" << to_string(username);
  out << ", " << "gender=" << to_string(gender);
  out << ", " << "age=" << to_string(age);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "email=" << to_string(email);
  out << ", " << "description=" << to_string(description);
  out << ", " << "field_mask="; (__isset.field_mask ? (out << to_string(field_mask)) : (out << "<null>"));
  out << ")";
}


UserException::~UserException() noexcept {
}

UserException::UserException() noexcept
   : errorCode(0),
     messgae() {
}

void UserException::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void UserException::__set_messgae(const std::string& val) {
  this->messgae = val;
}
std::ostream& operator<<(std::ostream& out, const UserException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messgae);
          this->__isset.messgae = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserException");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messgae", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messgae);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserException &a, UserException &b) noexcept {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.messgae, b.messgae);
  swap(a.__isset, b.__isset);
}

bool UserException::operator==(const UserException & rhs) const
{
  if (!(errorCode == rhs.errorCode))
    return false;
  if (!(messgae == rhs.messgae))
    return false;
  return true;
}

UserException::UserException(const UserException& other11) : TException() {
  errorCode = other11.errorCode;
  messgae = other11.messgae;
  __isset = other11.__isset;
}
UserException& UserException::operator=(const UserException& other12) {
  errorCode = other12.errorCode;
  messgae = other12.messgae;
  __isset = other12.__isset;
  return *this;
}
void UserException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserException(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "messgae=" << to_string(messgae);
  out << ")";
}

const char* UserException::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UserException";
  }
}


