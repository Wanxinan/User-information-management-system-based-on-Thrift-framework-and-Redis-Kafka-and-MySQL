/**
 * Autogenerated by Thrift Compiler (0.23.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserService_H
#define UserService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "user_service_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserServiceIf {
 public:
  virtual ~UserServiceIf() {}
  virtual void createUsers(User& _return, const User& user) = 0;
  virtual void getUserInfo(User& _return, const int64_t id) = 0;
  virtual void updateUserInfo(const User& user) = 0;
};

class UserServiceIfFactory {
 public:
  typedef UserServiceIf Handler;

  virtual ~UserServiceIfFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserServiceIf* /* handler */) = 0;
  };

class UserServiceIfSingletonFactory : virtual public UserServiceIfFactory {
 public:
  UserServiceIfSingletonFactory(const ::std::shared_ptr<UserServiceIf>& iface) : iface_(iface) {}
  virtual ~UserServiceIfSingletonFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(UserServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<UserServiceIf> iface_;
};

class UserServiceNull : virtual public UserServiceIf {
 public:
  virtual ~UserServiceNull() {}
  void createUsers(User& /* _return */, const User& /* user */) override {
    return;
  }
  void getUserInfo(User& /* _return */, const int64_t /* id */) override {
    return;
  }
  void updateUserInfo(const User& /* user */) override {
    return;
  }
};

typedef struct _UserService_createUsers_args__isset {
  _UserService_createUsers_args__isset() : user(false) {}
  bool user :1;
} _UserService_createUsers_args__isset;

class UserService_createUsers_args {
 public:

  UserService_createUsers_args(const UserService_createUsers_args&);
  UserService_createUsers_args& operator=(const UserService_createUsers_args&);
  UserService_createUsers_args() noexcept;

  virtual ~UserService_createUsers_args() noexcept;
  User user;

  _UserService_createUsers_args__isset __isset;

  void __set_user(const User& val);

  bool operator == (const UserService_createUsers_args & rhs) const;
  bool operator != (const UserService_createUsers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_createUsers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_createUsers_pargs {
 public:


  virtual ~UserService_createUsers_pargs() noexcept;
  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_createUsers_result__isset {
  _UserService_createUsers_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _UserService_createUsers_result__isset;

class UserService_createUsers_result {
 public:

  UserService_createUsers_result(const UserService_createUsers_result&);
  UserService_createUsers_result& operator=(const UserService_createUsers_result&);
  UserService_createUsers_result() noexcept;

  virtual ~UserService_createUsers_result() noexcept;
  User success;
  UserException e;

  _UserService_createUsers_result__isset __isset;

  void __set_success(const User& val);

  void __set_e(const UserException& val);

  bool operator == (const UserService_createUsers_result & rhs) const;
  bool operator != (const UserService_createUsers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_createUsers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_createUsers_presult__isset {
  _UserService_createUsers_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _UserService_createUsers_presult__isset;

class UserService_createUsers_presult {
 public:


  virtual ~UserService_createUsers_presult() noexcept;
  User* success;
  UserException e;

  _UserService_createUsers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_getUserInfo_args__isset {
  _UserService_getUserInfo_args__isset() : id(false) {}
  bool id :1;
} _UserService_getUserInfo_args__isset;

class UserService_getUserInfo_args {
 public:

  UserService_getUserInfo_args(const UserService_getUserInfo_args&) noexcept;
  UserService_getUserInfo_args& operator=(const UserService_getUserInfo_args&) noexcept;
  UserService_getUserInfo_args() noexcept;

  virtual ~UserService_getUserInfo_args() noexcept;
  int64_t id;

  _UserService_getUserInfo_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const UserService_getUserInfo_args & rhs) const;
  bool operator != (const UserService_getUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_getUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_getUserInfo_pargs {
 public:


  virtual ~UserService_getUserInfo_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_getUserInfo_result__isset {
  _UserService_getUserInfo_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _UserService_getUserInfo_result__isset;

class UserService_getUserInfo_result {
 public:

  UserService_getUserInfo_result(const UserService_getUserInfo_result&);
  UserService_getUserInfo_result& operator=(const UserService_getUserInfo_result&);
  UserService_getUserInfo_result() noexcept;

  virtual ~UserService_getUserInfo_result() noexcept;
  User success;
  UserException e;

  _UserService_getUserInfo_result__isset __isset;

  void __set_success(const User& val);

  void __set_e(const UserException& val);

  bool operator == (const UserService_getUserInfo_result & rhs) const;
  bool operator != (const UserService_getUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_getUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_getUserInfo_presult__isset {
  _UserService_getUserInfo_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _UserService_getUserInfo_presult__isset;

class UserService_getUserInfo_presult {
 public:


  virtual ~UserService_getUserInfo_presult() noexcept;
  User* success;
  UserException e;

  _UserService_getUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_updateUserInfo_args__isset {
  _UserService_updateUserInfo_args__isset() : user(false) {}
  bool user :1;
} _UserService_updateUserInfo_args__isset;

class UserService_updateUserInfo_args {
 public:

  UserService_updateUserInfo_args(const UserService_updateUserInfo_args&);
  UserService_updateUserInfo_args& operator=(const UserService_updateUserInfo_args&);
  UserService_updateUserInfo_args() noexcept;

  virtual ~UserService_updateUserInfo_args() noexcept;
  User user;

  _UserService_updateUserInfo_args__isset __isset;

  void __set_user(const User& val);

  bool operator == (const UserService_updateUserInfo_args & rhs) const;
  bool operator != (const UserService_updateUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_updateUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_updateUserInfo_pargs {
 public:


  virtual ~UserService_updateUserInfo_pargs() noexcept;
  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_updateUserInfo_result__isset {
  _UserService_updateUserInfo_result__isset() : e(false) {}
  bool e :1;
} _UserService_updateUserInfo_result__isset;

class UserService_updateUserInfo_result {
 public:

  UserService_updateUserInfo_result(const UserService_updateUserInfo_result&);
  UserService_updateUserInfo_result& operator=(const UserService_updateUserInfo_result&);
  UserService_updateUserInfo_result() noexcept;

  virtual ~UserService_updateUserInfo_result() noexcept;
  UserException e;

  _UserService_updateUserInfo_result__isset __isset;

  void __set_e(const UserException& val);

  bool operator == (const UserService_updateUserInfo_result & rhs) const;
  bool operator != (const UserService_updateUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_updateUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_updateUserInfo_presult__isset {
  _UserService_updateUserInfo_presult__isset() : e(false) {}
  bool e :1;
} _UserService_updateUserInfo_presult__isset;

class UserService_updateUserInfo_presult {
 public:


  virtual ~UserService_updateUserInfo_presult() noexcept;
  UserException e;

  _UserService_updateUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserServiceClient : virtual public UserServiceIf {
 public:
  UserServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createUsers(User& _return, const User& user) override;
  void send_createUsers(const User& user);
  void recv_createUsers(User& _return);
  void getUserInfo(User& _return, const int64_t id) override;
  void send_getUserInfo(const int64_t id);
  void recv_getUserInfo(User& _return);
  void updateUserInfo(const User& user) override;
  void send_updateUserInfo(const User& user);
  void recv_updateUserInfo();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<UserServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (UserServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserServiceProcessor(::std::shared_ptr<UserServiceIf> iface) :
    iface_(iface) {
    processMap_["createUsers"] = &UserServiceProcessor::process_createUsers;
    processMap_["getUserInfo"] = &UserServiceProcessor::process_getUserInfo;
    processMap_["updateUserInfo"] = &UserServiceProcessor::process_updateUserInfo;
  }

  virtual ~UserServiceProcessor() {}
};

class UserServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserServiceProcessorFactory(const ::std::shared_ptr< UserServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< UserServiceIfFactory > handlerFactory_;
};

class UserServiceMultiface : virtual public UserServiceIf {
 public:
  UserServiceMultiface(std::vector<std::shared_ptr<UserServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<UserServiceIf> > ifaces_;
  UserServiceMultiface() {}
  void add(::std::shared_ptr<UserServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createUsers(User& _return, const User& user) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createUsers(_return, user);
    }
    ifaces_[i]->createUsers(_return, user);
    return;
  }

  void getUserInfo(User& _return, const int64_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserInfo(_return, id);
    }
    ifaces_[i]->getUserInfo(_return, id);
    return;
  }

  void updateUserInfo(const User& user) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUserInfo(user);
    }
    ifaces_[i]->updateUserInfo(user);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserServiceConcurrentClient : virtual public UserServiceIf {
 public:
  UserServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  UserServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createUsers(User& _return, const User& user) override;
  int32_t send_createUsers(const User& user);
  void recv_createUsers(User& _return, const int32_t seqid);
  void getUserInfo(User& _return, const int64_t id) override;
  int32_t send_getUserInfo(const int64_t id);
  void recv_getUserInfo(User& _return, const int32_t seqid);
  void updateUserInfo(const User& user) override;
  int32_t send_updateUserInfo(const User& user);
  void recv_updateUserInfo(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
