/**
 * Autogenerated by Thrift Compiler (0.23.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef user_service_TYPES_H
#define user_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct Gender {
  enum type {
    UNKNOWN = 0,
    MALE = 1,
    FEMALE = 2,
    OTHER = 3
  };
};

extern const std::map<int, const char*> _Gender_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Gender::type& val);

std::string to_string(const Gender::type& val);

class User;

class UserException;

typedef struct _User__isset {
  _User__isset() : username(false), gender(false), age(false), phone(false), email(false), description(false), field_mask(false) {}
  bool username :1;
  bool gender :1;
  bool age :1;
  bool phone :1;
  bool email :1;
  bool description :1;
  bool field_mask :1;
} _User__isset;

class User : public virtual ::apache::thrift::TBase {
 public:

  User(const User&);
  User& operator=(const User&);
  User() noexcept;

  virtual ~User() noexcept;
  int64_t id;
  std::string username;
  /**
   * 
   * @see Gender
   */
  Gender::type gender;
  int32_t age;
  std::string phone;
  std::string email;
  std::string description;
  std::map<std::string, bool>  field_mask;

  _User__isset __isset;

  void __set_id(const int64_t val);

  void __set_username(const std::string& val);

  void __set_gender(const Gender::type val);

  void __set_age(const int32_t val);

  void __set_phone(const std::string& val);

  void __set_email(const std::string& val);

  void __set_description(const std::string& val);

  void __set_field_mask(const std::map<std::string, bool> & val);

  bool operator == (const User & rhs) const;
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b) noexcept;

std::ostream& operator<<(std::ostream& out, const User& obj);

typedef struct _UserException__isset {
  _UserException__isset() : errorCode(false), messgae(false) {}
  bool errorCode :1;
  bool messgae :1;
} _UserException__isset;

class UserException : public ::apache::thrift::TException {
 public:

  UserException(const UserException&);
  UserException& operator=(const UserException&);
  UserException() noexcept;

  virtual ~UserException() noexcept;
  int32_t errorCode;
  std::string messgae;

  _UserException__isset __isset;

  void __set_errorCode(const int32_t val);

  void __set_messgae(const std::string& val);

  bool operator == (const UserException & rhs) const;
  bool operator != (const UserException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(UserException &a, UserException &b) noexcept;

std::ostream& operator<<(std::ostream& out, const UserException& obj);



#endif
